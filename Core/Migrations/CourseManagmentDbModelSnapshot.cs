// <auto-generated />
using System;
using Core.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(CourseManagmentDb))]
    partial class CourseManagmentDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entites.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 648, DateTimeKind.Local).AddTicks(1349),
                            EndDate = new DateTime(2023, 1, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6363),
                            Name = "English",
                            StartDate = new DateTime(2022, 7, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6109)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6560),
                            EndDate = new DateTime(2023, 1, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6584),
                            Name = "French",
                            StartDate = new DateTime(2022, 7, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6576)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6591),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1988),
                            Name = "Business Administration",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2019)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6608),
                            EndDate = new DateTime(2023, 1, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6614),
                            Name = "ICDL",
                            StartDate = new DateTime(2022, 7, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6611)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6616),
                            EndDate = new DateTime(2023, 1, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6621),
                            Name = "Communication skills",
                            StartDate = new DateTime(2022, 7, 23, 10, 38, 10, 649, DateTimeKind.Local).AddTicks(6619)
                        });
                });

            modelBuilder.Entity("Core.Entites.CourseTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CoursesTeachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            TeacherId = 5
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 4,
                            TeacherId = 6
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 4,
                            TeacherId = 7
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 5,
                            TeacherId = 8
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 5,
                            TeacherId = 7
                        });
                });

            modelBuilder.Entity("Core.Entites.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LasttName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entites.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("Core.Entites.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6327),
                            MobileNumber = "0932222789",
                            Name = "Gary Cabrera"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6902),
                            MobileNumber = "0932222789",
                            Name = "Stacy Logan"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6932),
                            MobileNumber = "0965123456",
                            Name = "Priscilla Phelps"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6936),
                            MobileNumber = "0965123456",
                            Name = "Aliza Vance"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6938),
                            MobileNumber = "096514577",
                            Name = "Averie Carter"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6941),
                            MobileNumber = "0988123577",
                            Name = "Savannah Brooks"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6943),
                            MobileNumber = "09651234577",
                            Name = "Belen Fox"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6946),
                            MobileNumber = "09671234577",
                            Name = "Yadira Mcintyre"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 10, 23, 10, 38, 10, 650, DateTimeKind.Local).AddTicks(6949),
                            MobileNumber = "09631234577",
                            Name = "Grayson Stout"
                        });
                });

            modelBuilder.Entity("Core.Entites.CourseTeacher", b =>
                {
                    b.HasOne("Core.Entites.Course", null)
                        .WithMany("CoursesTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entites.Teacher", null)
                        .WithMany("CoursesTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entites.StudentCourse", b =>
                {
                    b.HasOne("Core.Entites.CourseTeacher", null)
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entites.Student", null)
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
